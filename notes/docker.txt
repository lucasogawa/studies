Images:
	- List:
		docker images

	- Inspect:
		docker inspect <IMAGE>

	- History:
		docker history <IMAGE>

	- Rename:
		docker tag <OLD_IMAGE_NAME:VERSION> <NEW_IMAGE_NAME:VERSION> 

	- Remove:
		docker rmi <IMAGE_ID>
		docker rmi $(docker image ls -qa) --force



Containers:
	- Download:
  		docker pull <CONTAINER>

	- Initialize:
		docker run --help
		docker run <OPTIONS> <CONTAINER>
		docker run <OPTIONS> <CONTAINER> bash
			-d: deteach
			-it: interactive
			-p <HOST_PORT>:<CONTAINER_PORT>
			-v <HOST_PATH>:<CONTAINER_PATH>
			--mount sorce=<HOST_PATH>,target=<CONTAINER_PATH>
			--tmpfs=<CONTAINER_PATH>
			--name=<CONTAINER_NAME>
			--network <NETWORK_NAME>

	- Exec:
		docker exec -it <CONTAINER> bash

	- Pause/Unpause:
		docker pause <CONTAINER>
		docker unpause <CONTAINER>

	- Stop/Start:
		docker stop <CONTAINER>
		docker start <CONTAINER>

	- List:
		docker ps <OPTIONS>
			-a: stopped containers
			-s: with volumes
	
	- Remove:
		docker rm <CONTAINER_ID>
		docker rm $(docker ps -qa)

	- Ports:
		docker port <CONTAINER>

	- Logs:
		docker logs <OPTIONS> <CONTAINER>
			-f: real time

	- Inspect:
		docker inspect <CONTAINER>



Volume:
	- Create:
		docker volume create <VOLUME_NAME>
	
	- Path in host:
		/var/lib/docker/volumes/<VOLUME_NAME>



Network:
	- List:
		docker network ls
			bridge: container network
			host: same as host
			none: none interface

	- Create:
		docker network create <OPTIONS> <NETWORK_NAME>f
			--driver <bridge/host/none>



Dockerfile:
	- Build:
		- docker build -t <IMAGE_NAME> . 

	- Exemple:
		FROM <IMAGE:VERSION>
		WORKDIR <PATH>
		EXPOSE <PORT>
		COPY . .
		RUN <COMMAND>
		ENTRYPOINT <COMMAND>



Docker Hub:
	- Login:
		docker login -u <DOCKER_USER>

	- Push:
		docker push <IMAGE_NAME:VERSION>



Docker-compose:
	- List:
		docker-compose ps
	
	- Start/Stop:
		docker-compose up -d
		docker-compose down
		docker-compose stop

	Example:
		version: "3.9"
		services:
			<SERVICE_NAME>:
				image: <IMAGE>
				container_name: <CONTAINER_NAME>
				networks:
					- <NETWORK_NAME>
				ports:
					- <HOST_PORT>:<CONTAINER_PORT>
				depends_on:
					- <CONTAINER_NAME>

		networks:
			<NETWORK_NAME>:
				driver: <DRIVER>
